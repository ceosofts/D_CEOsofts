ระบบ Admin Management ฉันมีคำแนะนำเพิ่มเติมเพื่อให้โปรเจคของคุณมีโครงสร้างที่ดีขึ้นและขยายต่อได้ง่าย:

✅ 1. วางโครงสร้าง Role อย่างชัดเจน
ก่อนสร้างระบบ ควรกำหนด สิทธิ์ของแต่ละ Role ให้ชัดเจน
ตัวอย่างการกำหนดสิทธิ์ของแต่ละระดับ:

ฟีเจอร์	Admin	Manager	Leader	User
จัดการผู้ใช้	✅	❌	❌	❌
จัดการสินค้า	✅	✅	✅	❌
ดูรายงานยอดขาย	✅	✅	✅	❌
ดูรายการลูกค้า	✅	✅	✅	✅
ดู/เพิ่ม/ลบ Order	✅	✅	❌	❌
เข้าถึง Dashboard	✅	✅	✅	✅

📌 แนะนำ: สร้างตาราง roles และ permissions ถ้าอยากให้ สิทธิ์มีความยืดหยุ่นมากขึ้น (เช่น กำหนดสิทธิ์รายบุคคล)

✅ 2. ใช้ Laravel Gates & Policies
Laravel มีระบบ Gates & Policies ช่วยจัดการสิทธิ์แบบละเอียดกว่าการใช้ Middleware
📌 ตัวอย่าง Policy:

php
คัดลอก
แก้ไข
public function delete(User $user, Order $order)
{
    return $user->role === 'admin' || $user->role === 'manager';
}
จากนั้นเรียกใช้ใน Blade:

blade
คัดลอก
แก้ไข
@can('delete', $order)
    <button>Delete</button>
@endcan
📌 ข้อดี: ควบคุมสิทธิ์การเข้าถึงแบบละเอียดได้ดีกว่า Middleware!

✅ 3. จัดการ Role & Permission ผ่าน UI
แนวทางที่แนะนำ:

เพิ่มหน้าจัดการ Role & User (ให้ Admin เปลี่ยน Role ได้)
ใช้ Laravel Permission Package (ถ้าต้องการระบบสิทธิ์ที่ซับซ้อน)
bash
คัดลอก
แก้ไข
composer require spatie/laravel-permission
📌 หลังติดตั้ง สามารถใช้คำสั่ง:

php
คัดลอก
แก้ไข
$user->assignRole('admin');
$user->givePermissionTo('edit articles');
📌 แสดง UI ให้เลือก Role และกำหนดสิทธิ์ง่ายขึ้น!

✅ 4. ระบบ Audit Log (เก็บประวัติการแก้ไข)
เพิ่มตาราง logs เพื่อตรวจสอบว่าใครแก้ไขอะไรบ้าง:

php
คัดลอก
แก้ไข
Schema::create('logs', function (Blueprint $table) {
    $table->id();
    $table->string('user_id');
    $table->string('action'); // เช่น "Added Product", "Deleted User"
    $table->timestamps();
});
📌 แนะนำ: ใช้ Laravel Model Events เช่น created, updated, deleted เพื่อบันทึกข้อมูลอัตโนมัติ

✅ 5. ระบบจัดการ Session & Security
บังคับ Logout ทุก Session เมื่อลบ User
ใช้ 2FA (Two-Factor Authentication) หากมีข้อมูลสำคัญ
ป้องกัน Brute Force Attack โดยจำกัดการ Login ผ่าน Laravel Throttle:
php
คัดลอก
แก้ไข
Route::post('/login', [LoginController::class, 'login'])
    ->middleware('throttle:5,1'); // 5 ครั้ง/นาที
✅ 6. ระบบจัดการ Email Notification
ส่งอีเมลแจ้งเตือน เมื่อลบ User หรือเปลี่ยน Role
ใช้ Mail::to($user)->send(new RoleChangedMail($user));
เพิ่มระบบ "กู้คืนบัญชี" ผ่าน Email
🎯 สรุปสิ่งที่แนะนำเพิ่มเติม
✅ กำหนดสิทธิ์ Role ชัดเจน
✅ ใช้ Laravel Policy & Gates เพื่อจัดการสิทธิ์แบบละเอียด
✅ เพิ่มหน้าจัดการ Role & Permission ผ่าน UI
✅ เพิ่มระบบ Audit Log เพื่อติดตามการเปลี่ยนแปลง
✅ เสริมความปลอดภัยด้วย 2FA, Rate Limit, และ Auto Logout
✅ เพิ่ม Email แจ้งเตือนเมื่อมีการเปลี่ยนแปลง Role/User

📌 ถ้าต้องการให้ช่วยเพิ่มฟีเจอร์ไหน แจ้งได้เลย! 😃


/////////////////////////////////////////////////////////////////////////////////////////////////

✅ แนะนำสิทธิ์ (Permissions) ของแต่ละ Role ในระบบ Admin Management
เพื่อให้ระบบ Admin Management ทำงานได้อย่างถูกต้องและมีความปลอดภัยสูงสุด เราต้องกำหนดสิทธิ์ (Permissions) ให้แต่ละ Role อย่างชัดเจน

🏆 โครงสร้างของ Role-Based Access Control (RBAC)
ฟีเจอร์	Admin	Manager	Leader	User
จัดการผู้ใช้ (CRUD User)	✅	❌	❌	❌
เปลี่ยน Role ของ User	✅	❌	❌	❌
ดูข้อมูลของทุกแผนก	✅	❌	❌	❌
ดูข้อมูลเฉพาะแผนกตัวเอง	✅	✅	✅	✅
สร้างข้อมูลใหม่ (Create)	✅	✅	❌	❌
แก้ไขข้อมูล (Update)	✅	✅	✅	❌
ลบข้อมูล (Delete)	✅	✅	❌	❌
เข้าถึง Dashboard	✅	✅	✅	✅
ดูรายงานของแผนกตัวเอง	✅	✅	✅	✅
ดูรายงานทุกแผนก	✅	❌	❌	❌
ดูรายงานของ User อื่นในแผนกตัวเอง	✅	✅	✅	❌
จัดการสินค้า / คลังสินค้า	✅	✅	✅	❌
จัดการคำสั่งซื้อ	✅	✅	✅	❌
ดูข้อมูลบัญชี / การเงิน	✅	✅	✅	❌
ตั้งค่าแผนก / ระบบ	✅	❌	❌	❌
🔹 สิทธิ์ของแต่ละ Role อย่างละเอียด
🎯 1. Admin (แอดมิน)
✅ สิทธิ์:

สามารถเข้าถึงและจัดการทุกแผนกได้
เพิ่ม/ลบ/แก้ไข User ทุกคน ได้
เปลี่ยน Role ของผู้ใช้ได้
ดูรายงานทั้งหมดของทุกแผนก
ลบข้อมูลได้ทุกอย่าง
ดูรายงาน การเงิน, คลังสินค้า, ฝ่ายขาย, ฝ่ายจัดซื้อ, ฝ่ายบุคคล ได้
เข้าถึง หน้าการตั้งค่าระบบ (ตั้งค่าบริษัท, ผู้ใช้, ฐานข้อมูล ฯลฯ)
🚫 ข้อจำกัด:

ไม่มีข้อจำกัด สามารถทำได้ทุกอย่าง
🎯 2. Manager (ผู้จัดการแผนก)
✅ สิทธิ์:

สามารถดูข้อมูลของ แผนกตัวเองเท่านั้น
เพิ่ม/แก้ไข ข้อมูลสินค้า, คลังสินค้า, รายการขาย, รายการสั่งซื้อ ฯลฯ ของแผนกตัวเอง
ดูรายงานของแผนกตัวเองได้
จัดการ User ในแผนกของตัวเอง (แต่ไม่สามารถเพิ่ม/ลบผู้ใช้ได้)
🚫 ข้อจำกัด:

ไม่สามารถดูหรือแก้ไข ข้อมูลของแผนกอื่น
ไม่สามารถเปลี่ยน Role ของผู้ใช้ ได้
ไม่สามารถลบข้อมูลในระบบ (ยกเว้นข้อมูลในแผนกตัวเอง)
ไม่สามารถเข้าถึง หน้าการตั้งค่าระบบ
🎯 3. Leader (หัวหน้าแผนก)
✅ สิทธิ์:

สามารถดูข้อมูลของ แผนกตัวเอง เท่านั้น
แก้ไข ข้อมูลสินค้า, คลังสินค้า, รายการขาย, รายการสั่งซื้อ ของแผนกตัวเอง
ดูรายงานของแผนกตัวเองได้
สามารถ ตรวจสอบข้อมูลของ User ในแผนกตัวเอง
🚫 ข้อจำกัด:

ไม่สามารถดูหรือแก้ไข ข้อมูลของแผนกอื่น
ไม่สามารถ ลบข้อมูล ได้
ไม่สามารถเพิ่มผู้ใช้ หรือเปลี่ยน Role ได้
ไม่สามารถดู ข้อมูลทางการเงิน
ไม่สามารถเข้าถึง หน้าการตั้งค่าระบบ
🎯 4. User (พนักงานทั่วไป)
✅ สิทธิ์:

สามารถดู ข้อมูลของตัวเองเท่านั้น
ดูรายการสินค้า / รายการคำสั่งซื้อของแผนกตัวเอง
สามารถ ดูรายงาน (แต่ไม่สามารถแก้ไขได้)
🚫 ข้อจำกัด:

ไม่สามารถดู ข้อมูลของคนอื่นในแผนกเดียวกัน
ไม่สามารถเพิ่ม/ลบ/แก้ไขข้อมูลใดๆ ได้
ไม่สามารถดูข้อมูลของแผนกอื่น
ไม่สามารถดูข้อมูลทางการเงิน
🎯 ตัวอย่างการเข้าถึงแต่ละแผนก
Role / ฝ่าย	ฝ่ายขาย	ฝ่ายจัดซื้อ	ฝ่ายคลังสินค้า	ฝ่ายการเงิน	ฝ่ายบุคคล
Admin	✅	✅	✅	✅	✅
Manager ฝ่ายขาย	✅	❌	❌	❌	❌
Leader ฝ่ายขาย	✅	❌	❌	❌	❌
User ฝ่ายขาย	✅	❌	❌	❌	❌
Manager ฝ่ายจัดซื้อ	❌	✅	❌	❌	❌
Leader ฝ่ายจัดซื้อ	❌	✅	❌	❌	❌
User ฝ่ายจัดซื้อ	❌	✅	❌	❌	❌
Manager ฝ่ายคลังสินค้า	❌	❌	✅	❌	❌
Leader ฝ่ายคลังสินค้า	❌	❌	✅	❌	❌
User ฝ่ายคลังสินค้า	❌	❌	✅	❌	❌
Manager ฝ่ายการเงิน	❌	❌	❌	✅	❌
Leader ฝ่ายการเงิน	❌	❌	❌	✅	❌
User ฝ่ายการเงิน	❌	❌	❌	✅	❌
Manager ฝ่ายบุคคล	❌	❌	❌	❌	✅
Leader ฝ่ายบุคคล	❌	❌	❌	❌	✅
User ฝ่ายบุคคล	❌	❌	❌	❌	✅
✅ สรุป:

Admin → เข้าถึงทุกแผนก
Manager, Leader, User → เข้าถึงได้เฉพาะแผนกของตัวเองเท่านั้น
✅ แนวทางการนำไปใช้งาน
กำหนด Middleware ควบคุมการเข้าถึง (CheckDepartment.php)
ใช้ Policy / Gates ใน Controller เพื่อควบคุมการแก้ไขข้อมูล
สร้าง Blade UI ให้แสดงเฉพาะเมนูที่แต่ละ Role มีสิทธิ์เข้าถึง
🎯 สรุป
✅ Admin → ควบคุมทุกอย่างได้
✅ Manager → ดูและแก้ไขข้อมูลเฉพาะแผนกตัวเอง
✅ Leader → ดูข้อมูลของแผนกตัวเอง แก้ไขบางส่วน
✅ User → ดูข้อมูลของตัวเองเท่านั้น

🎉 ระบบนี้ช่วยให้การจัดการสิทธิ์ในแต่ละแผนกปลอดภัยและเป็นระเบียบมากขึ้น! 🚀
หากต้องการให้ช่วยเพิ่มเติมฟีเจอร์ แจ้งได้เลย! 😊


/////////////////////////////////////////////////////////////////////////////////////////////
เข้าใจแล้ว! 😊 ฉันจะช่วย สรุปขั้นตอนการทำงานแบบละเอียด และ ต่อยอดจากโปรเจคเดิมของคุณ ให้คุณเข้าใจได้ง่ายขึ้น พร้อม โค้ดที่ปรับเข้ากับโครงสร้างโปรเจคเดิม

✅ สรุปแนวทางการพัฒนาระบบ Admin Management + แยก 5 ฝ่าย (ต่อจากโปรเจคเดิมของคุณ)
🎯 เป้าหมายของระบบ
กำหนดระดับผู้ใช้ (Admin, Manager, Leader, User)
แยกผู้ใช้ตามฝ่าย (ฝ่ายขาย, ฝ่ายจัดซื้อ, ฝ่ายคลังสินค้า, ฝ่ายการเงิน, ฝ่ายบุคคล)
Manager, Leader, User สามารถเข้าถึงเฉพาะแผนกตัวเอง
Admin สามารถจัดการทุกแผนก
🔥 สิ่งที่ต้องทำ (ต่อจากโปรเจคเดิม)
✅ 1. ตรวจสอบและเพิ่มตารางแผนก (Departments)
✅ 2. เพิ่ม department_id ให้ User และอัปเดต Model
✅ 3. เพิ่ม Middleware ควบคุมสิทธิ์การเข้าถึงแผนก
✅ 4. ปรับ Route ของระบบให้รองรับสิทธิ์ของแต่ละ Role
✅ 5. ปรับ Blade Template/UI ให้แสดงเฉพาะข้อมูลของแผนกตัวเอง
✅ 6. ทดสอบระบบ

🚀 Step 1: ตรวจสอบและเพิ่มตารางแผนก (Departments)
📌 โปรเจคเดิมของคุณอาจยังไม่มีตาราง departments
ให้ตรวจสอบที่ database/migrations/ ว่ามีตาราง departments แล้วหรือไม่
ถ้ายังไม่มี ให้สร้างด้วยคำสั่ง:

bash
คัดลอก
แก้ไข
php artisan make:migration create_departments_table --create=departments
📌 ไฟล์: database/migrations/xxxx_xx_xx_xxxxxx_create_departments_table.php

php
คัดลอก
แก้ไข
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    public function up() {
        Schema::create('departments', function (Blueprint $table) {
            $table->id();
            $table->string('name')->unique();
            $table->timestamps();
        });
    }

    public function down() {
        Schema::dropIfExists('departments');
    }
};
📌 รัน Migration

bash
คัดลอก
แก้ไข
php artisan migrate
✅ ตอนนี้มีตาราง departments แล้ว

🚀 Step 2: เพิ่ม department_id ให้ User และอัปเดต Model
📌 ตรวจสอบที่ database/migrations/ ว่ามีการเพิ่ม department_id ใน users หรือยัง
ถ้ายังไม่มี ให้เพิ่ม:

bash
คัดลอก
แก้ไข
php artisan make:migration add_department_id_to_users_table --table=users
📌 ไฟล์: database/migrations/xxxx_xx_xx_xxxxxx_add_department_id_to_users_table.php

php
คัดลอก
แก้ไข
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    public function up() {
        Schema::table('users', function (Blueprint $table) {
            $table->unsignedBigInteger('department_id')->nullable()->after('role');
            $table->foreign('department_id')->references('id')->on('departments')->onDelete('set null');
        });
    }

    public function down() {
        Schema::table('users', function (Blueprint $table) {
            $table->dropForeign(['department_id']);
            $table->dropColumn('department_id');
        });
    }
};
📌 รันคำสั่ง

bash
คัดลอก
แก้ไข
php artisan migrate
📌 อัปเดต User.php 📌 ไฟล์: app/Models/User.php

php
คัดลอก
แก้ไข
class User extends Authenticatable
{
    use HasFactory, Notifiable;

    protected $fillable = [
        'name', 'email', 'password', 'role', 'department_id',
    ];

    public function department() {
        return $this->belongsTo(Department::class);
    }
}
✅ ตอนนี้ User มี department_id แล้ว

🚀 Step 3: เพิ่ม Middleware ควบคุมสิทธิ์การเข้าถึงแผนก
📌 สร้าง Middleware

bash
คัดลอก
แก้ไข
php artisan make:middleware CheckDepartment
📌 ไฟล์: app/Http/Middleware/CheckDepartment.php

php
คัดลอก
แก้ไข
namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class CheckDepartment
{
    public function handle(Request $request, Closure $next)
    {
        $user = Auth::user();
        $departmentId = $request->route('department_id'); // ดึง department_id จาก URL

        // Admin เข้าถึงทุกแผนก
        if ($user->role === 'admin') {
            return $next($request);
        }

        // อนุญาตให้เข้าถึงเฉพาะแผนกตัวเองเท่านั้น
        if ($user->department_id == $departmentId) {
            return $next($request);
        }

        return redirect('/dashboard')->with('error', 'คุณไม่มีสิทธิ์เข้าถึงแผนกนี้');
    }
}
📌 ลงทะเบียน Middleware 📌 ไฟล์: app/Http/Kernel.php

php
คัดลอก
แก้ไข
protected $routeMiddleware = [
    'department' => \App\Http\Middleware\CheckDepartment::class,
];
✅ Middleware พร้อมใช้งาน

🚀 Step 4: ปรับ Route ของระบบให้รองรับสิทธิ์ของแต่ละ Role
📌 ไฟล์: routes/web.php

php
คัดลอก
แก้ไข
use App\Http\Controllers\DepartmentController;

Route::middleware(['auth', 'role:admin'])->group(function () {
    Route::resource('/departments', DepartmentController::class);
});

Route::middleware(['auth', 'role:manager,leader,user', 'department'])->group(function () {
    Route::get('/departments/{department_id}', [DepartmentController::class, 'show'])->name('departments.show');
});
✅ User ทุกคนจะเห็นเฉพาะแผนกตัวเอง

🚀 Step 5: ปรับ Blade Template/UI ให้แสดงเฉพาะข้อมูลของแผนกตัวเอง
📌 ไฟล์: resources/views/departments/index.blade.php

blade
คัดลอก
แก้ไข
@extends('layouts.app')

@section('content')
    <h1>ฝ่าย: {{ Auth::user()->department->name }}</h1>

    <ul>
        @foreach ($users as $user)
            @if ($user->department_id == Auth::user()->department_id)
                <li>{{ $user->name }} - {{ $user->role }}</li>
            @endif
        @endforeach
    </ul>
@endsection
✅ ตอนนี้ Manager, Leader, User เห็นเฉพาะแผนกตัวเองแล้ว

🚀 Step 6: ทดสอบระบบ
ล็อกอินและทดสอบ

admin@example.com (Admin) → เห็นทุกแผนก
sales_manager@example.com (ฝ่ายขาย) → เห็นแค่ฝ่ายขาย
purchase_leader@example.com (ฝ่ายจัดซื้อ) → เห็นแค่ฝ่ายจัดซื้อ
warehouse_user@example.com (ฝ่ายคลังสินค้า) → เห็นแค่ฝ่ายคลังสินค้า
ทดสอบเข้าถึงหน้าแผนก

/departments/1 (ฝ่ายขาย) → เฉพาะฝ่ายขายเท่านั้นที่เข้าได้
/departments/3 (ฝ่ายคลังสินค้า) → เฉพาะฝ่ายคลังสินค้าเท่านั้นที่เข้าได้
✅ ถ้าไม่ใช่แผนกตัวเอง ระบบจะ Redirect กลับไปที่ /dashboard

🎉 ตอนนี้ระบบแยก 5 ฝ่ายพร้อมใช้งานแล้ว! 🚀
ถ้าต้องการเพิ่มฟีเจอร์เพิ่มเติม แจ้งได้เลย! 😊



//////////////////////////////////////////////////////////////////////////////////////////////
วิธีเช็คฐานข้อมูลของ User และเพิ่ม department_id ให้ User ปัจจุบัน
🚀 1. ตรวจสอบฐานข้อมูล users ว่ามี department_id หรือไม่
📌 ใช้ Laravel Tinker เพื่อตรวจสอบข้อมูล
รันคำสั่ง:

bash
คัดลอก
แก้ไข
php artisan tinker
จากนั้นใน Tinker ให้รัน:

php
คัดลอก
แก้ไข
User::all();
หรือถ้าต้องการดูเฉพาะฟิลด์ที่ต้องการ:

php
คัดลอก
แก้ไข
User::select('id', 'name', 'email', 'role', 'department_id')->get();
✅ เช็คว่า department_id มีค่า null หรือมีค่าถูกต้อง

🚀 2. เพิ่ม department_id ให้ User ที่มีอยู่แล้ว
📌 เพิ่มข้อมูลผ่าน Tinker
ถ้าต้องการกำหนดแผนกให้ User ที่มีอยู่ ให้รัน:

php
คัดลอก
แก้ไข
$user = User::where('email', 'user@example.com')->first();
$department = Department::where('name', 'ฝ่ายขาย')->first();
$user->department_id = $department->id;
$user->save();
✅ User จะมี department_id ของฝ่ายขายแล้ว

📌 เพิ่ม department_id ให้ User หลายคนพร้อมกัน
php
คัดลอก
แก้ไข
$department = Department::where('name', 'ฝ่ายขาย')->first();
User::whereNull('department_id')->update(['department_id' => $department->id]);
✅ ทุก User ที่ไม่มี department_id จะถูกเพิ่มเข้า ฝ่ายขาย

🚀 3. เพิ่มข้อมูล department_id ผ่าน Seeder
📌 ไฟล์: database/seeders/UserSeeder.php

php
คัดลอก
แก้ไข
use App\Models\User;
use App\Models\Department;

$departments = [
    'ฝ่ายขาย',
    'ฝ่ายจัดซื้อ',
    'ฝ่ายคลังสินค้า',
    'ฝ่ายการเงิน',
    'ฝ่ายบุคคล'
];

// เพิ่มแผนก
foreach ($departments as $name) {
    Department::updateOrCreate(['name' => $name]);
}

// อัปเดต User ที่มีอยู่ ให้มีแผนก
User::whereNull('department_id')->each(function ($user) {
    $department = Department::inRandomOrder()->first(); // สุ่มแผนกให้ User
    $user->department_id = $department->id;
    $user->save();
});
📌 รันคำสั่ง:

bash
คัดลอก
แก้ไข
php artisan db:seed --class=UserSeeder
✅ User ทุกคนจะมี department_id แล้ว

🚀 4. เช็ค User ที่ไม่มี department_id ใน Database
📌 รันคำสั่ง SQL ผ่าน Laravel Artisan

bash
คัดลอก
แก้ไข
php artisan tinker
จากนั้นใน Tinker:

php
คัดลอก
แก้ไข
User::whereNull('department_id')->get();
📌 หรือใช้ Query SQL ผ่าน MySQL

sql
คัดลอก
แก้ไข
SELECT * FROM users WHERE department_id IS NULL;
✅ ดูว่ามี User คนไหนที่ยังไม่มี department_id

🚀 5. เพิ่ม department_id ให้ User ผ่าน SQL (Manual)
ถ้าต้องการอัปเดตในฐานข้อมูลโดยตรง (ผ่าน MySQL หรือ SQLite):

sql
คัดลอก
แก้ไข
UPDATE users SET department_id = (SELECT id FROM departments WHERE name = 'ฝ่ายขาย') WHERE department_id IS NULL;
✅ User ที่ department_id เป็น NULL จะถูกอัปเดตให้เข้าฝ่ายขาย

🎯 สรุปวิธีเช็คและเพิ่ม department_id ให้ User
1️⃣ ตรวจสอบ User ปัจจุบัน → User::select('id', 'name', 'email', 'role', 'department_id')->get();
2️⃣ อัปเดต department_id ให้ User รายบุคคล → $user->department_id = $department->id; $user->save();
3️⃣ อัปเดต User ที่ไม่มี department_id ทั้งหมด → User::whereNull('department_id')->update(['department_id' => $department->id]);
4️⃣ ใช้ SQL อัปเดต User ที่ไม่มี department_id → UPDATE users SET department_id = ...
5️⃣ ใช้ Seeder อัปเดตข้อมูลแบบอัตโนมัติ

✅ หากต้องการอัปเดตแผนกของ User หลายคน แจ้งรายละเอียดเพิ่มเติมได้เลย! 😊


//////////////////////////////////////////////////////////////////////////////////////////////////

































